@c -*-texinfo-*-

@node misc
@section Various utilities

@menu
* bytevectors::           Bytevector utilities
* password::              Password hashing
* tcp::                   Basic TCP client connections
@end menu


@node bytevectors
@subsection Bytevector utilities
The @code{(industria bytevectors)} library contains utilities for
working with @rnrs{} bytevectors.

@deffn Procedure bytevector-append [bytevector ...]
Appends the given bytevectors.
@end deffn

@deffn Procedure bytevector-concatenate list
@var{list} is a list of bytevectors. The bytevectors are appended.
@end deffn

@deffn Procedure subbytevector bytevector start [end]
Analogous to @code{substring}. Returns a new bytevector containing the
bytes of @var{bytevector} from index @code{start} to @var{end}
(exclusive).
@end deffn

@deffn Procedure bytevector-u8-index bytevector byte [start end]
Searches @var{bytevector} for @var{byte}, from left to right. The
optional arguments @var{start} and @var{end} give the range to search.
By default the whole bytevector is searched. Returns @code{#f} is no
match is found.
@end deffn

@deffn Procedure bytevector-u8-index-right bytevector byte [start end]
Analogous to @code{bytevector-u8-index-right}, except this procedure
searches right-to-left.
@end deffn

@deffn Procedure bytevector->uint bytevector
@var{bytevector} is interpreted as an unsigned integer in big endian
byte order and is converted to an integer. The empty bytevector is
treated as zero.
@end deffn

@deffn Procedure uint->bytevector integer
@var{integer} is converted to an unsigned integer in big endian byte
order. The returned bytevector has the minimum possible length. Zero
is converted to the empty bytevector.

@example
(import (industria bytevectors))
(uint->bytevector 256)
@result{} #vu8(1 0)
(uint->bytevector 255)
@result{} #vu8(255)
@end example
@end deffn

@deffn Procedure bytevector=?/constant-time bytevector1 bytevector2
True if @var{bytevector1} and @var{bytevector2} are of equal length
and have the same contents.

This is a drop-in replacement for @code{bytevector=?} that does not
leak information about the outcome of the comparison by how much time
the comparison takes to perform. It works by accumulating the
differences between the bytevectors. This kind of operation is most
often needed when comparing fixed-length message digests, so the
length comparison is done in the obvious (fast) way.
@end deffn


@node password
@subsection Password hashing
The procedure provided by @code{(industria crypto password)} is the
same type of procedure that is called @code{crypt} in the standard C
library. It is used for password hashing, i.e.@: it scrambles
passwords. This is a method often used when passwords need to be
stored in databases.

The scrambling algorithms are based on cryptographic primitives but
have been modified so that they take more time to compute. They also
happen to be quite annoying to implement.

Only DES and MD5 based hashes are currently supported.

@deffn Procedure crypt password salt
Scrambles a @var{password} using the given @var{salt}. The @var{salt}
can also be a hash. The returned hash will be prefixed by the salt.

A fresh random salt should be used when hashing a new password. The
purpose of the salt is to make it infeasible to reverse the hash
using lookup tables.

To verify that a password matches a hash, you can do something like
@code{(string=? hash (crypt password hash))}.

@example
(import (industria crypto password))
(crypt "test" "..")
@result{} "..9sjyf8zL76k"
@end example

@example
(crypt "test" "$1$RQ3YWMJd$")
@result{} "$1$RQ3YWMJd$oIomUD5DCxenAs2icezcn."
@end example

@example
(string=? "$1$ggKHY.Dz$fNBcmNFTa1BFGXoLsRDkS."
          (crypt "test" "$1$ggKHY.Dz$fNBcmNFTa1BFGXoLsRDkS."))
@result{} #t
@end example
@end deffn

@c TODO: there ought be a simple way to generate a fresh salt

@c ======================================================================
@node tcp
@subsection Basic TCP client connections
The @code{(industria tcp)} provides a simple TCP client. This
library needs implementation-specific code, so the author is not eager
to provide more than the bare minimum.

This library should work with Ikarus Scheme, GNU Guile, Larceny (not
tested with Petit Larceny and Common Larceny), Mosh Scheme, Petite
Chez Scheme (as long as the nc command is installed), Vicare Scheme,
and Ypsilon Scheme. Once upon a time it also worked with PLT Scheme,
but it has not been tested with Racket.

@deffn Procedure tcp-connect hostname portname
Initiates a TCP connection to the given @var{hostname} and
@var{portname} (both of which are strings).

Returns an input-port and an output-port. They are not guaranteed to
be distinct.
@end deffn
