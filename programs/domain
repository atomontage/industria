#!/usr/bin/env scheme-script
;; -*- mode: scheme; coding: utf-8 -*- !#
;; Copyright © 2009, 2010, 2011 Göran Weinholt <goran@weinholt.se>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
#!r6rs

;; Generally useless program to test the dns library.

(import (rnrs)
        (only (ikarus) udp-connect)
        (weinholt net tcp)
        (weinholt net dns)
        (weinholt net dns numbers))

(define (print . x) (for-each display x) (newline))

;; TODO: accept command line arguments

;;(define udp-connect #f)

(define (query-and-print host service protocol qname qtype)
  (let-values (((i o)
                (case protocol
                  ((tcp) (tcp-connect host service))
                  ((udp) (udp-connect host service)))))
    (let ((q (make-normal-dns-query qname qtype #t)))
      ;; (print ";;; Sending query: ") (print-dns-message q)
      (case protocol
        ((tcp) (put-dns-message/delimited o q))
        ((udp) (put-dns-message o q)))
      (flush-output-port o)
      (let lp ()
        (let ((r (parse-dns-message
                  (case protocol
                    ((tcp) (get-bytevector-dns i))
                    ((udp) (get-bytevector-some i))))))
          (cond ((falsified-dns-reply? q r)
                 ;; Useful for UDP only, really
                 (print ";;; FALSIFIED MESSAGE:")
                 (print-dns-message r)
                 (print ";;; FALSIFIED MESSAGE DISCARDED!")
                 (lp))
                ((= (dns-message-rcode r) (dns-rcode NOERROR))
                 ;; TODO: restore the case from qname
                 (print ";;; Reply on " protocol " socket " host ":" service)
                 (print-dns-message r)
                 (close-port i) (close-port o))
                (else
                 (print ";; Reply with an ERROR:")
                 (print-dns-message r)
                 (print "\n\n;;; THERE IS AN ERROR!!!!")
                 (close-port i) (close-port o))))))))


(query-and-print "8.8.8.8" "53" 'tcp
                 "." (dns-rrtype DNSKEY))

